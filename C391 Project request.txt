1. Introduction

In this project you are going to develop a web-based database application system, called Ocean Observation System.
An Ocean Observation System (OOS) is a computer information system that stores and processes different types of data for an ocean observatory. Those data are produced by a wide range of different sensors, placed at different locations. The sensor types include underwater cameras that capture images, underwater microphones that captures sound data, and a number of different sensors for scalar measurement of water temperature, oxygen concentration, salinity, conductivity, and others. Images and sound data are collected at irregular time points (when requested by a scientist or triggered by a motion sensor); scalar data is collected every hour.

The OOS will be used by the following classes (types) of users, and each is provided with specific functions.
·administrator,
·data curator (users who are allowed to upload data),
·scientist (users who subscribe to certain sensor data that they can view, query and download)
2. System Specification

The system must contain the information about its users and the collected data. For your convenience, the following tables have been specified using the givenscriptand they must not be altered. Please download the setup.sql (see link below) to generate the tables. You may create supplementary tables and/or sequences, depending on your own implementation.
users (user_name, password, role, person_id, date_registered)
persons (person_id, first_name, last_name, address, email, phone)
sensors (sensor_id, location, sensor_type, description)
subscriptions (sensor_id,person_id)
audio_recordings (recording_id, sensor_id, date_created, length, recorded_data, description)
images (image_id, sensor_id, date_created , recorded_data, thumbnail, description)
scalar_data (id, sensor_id, date_created, value)
users store the name, password, role, person_id, and time registered for each user;
persons store the personal information about each person;
sensor stores information about all available sensors including types and locations;
subscriptions store who has subscribed to which sensor;
audio_recordings contains audio files recorded by the audio recording devices in wav format;
images contain the captured images and thumbnails in jpg format;
scalar_data contains the hourly measurements for all scalar sensors represented by a floating point value

Note that a person can have different user roles with different user names.

The system must contain the following modules, each with the specified functionalities.
login module

This module will be used by all users to login to the system with proper privileges, and to modify their personal information and/or the password.
sensor and user management module

This module allows a system administrator to create and remove sensors, as well as to manage (enter, update, or remove) user accounts, i.e., the information stored in tables users and persons.
subscribe module

This module will be used by scientists to subscribe to and unsubscribe from sensor data. It should allow a user to list of all sensors, their types, their locations, and their descriptions. The user should also see which sensor he or she is currently subscribed to, and should be able to add or remove subscriptions to sensors.
uploading module

This module will be used by data curators to upload images, audio recordings, and scalar measurements in batches, after possible processing and annotations in the description field. In reality, some of these data may be automatically uploaded from the sensors to the database. In this project, however, you are asked to implement this module to upload all the data stored in the user's local file system to the database.
search module

This module can be used by all scientists to search the database for a list of relevant database records, and to download images, audio recordings, and scalar measurements for a given time period in csv format.

The search condition should include
a list of keywords, and/or
sensor type and/or location, and
a time period

The search module, upon receiving the above condition, must display a list of all sensor records that
satisfy the search condition, and
should be visible to the user/scientists, i.e., they should not see data they have not subscribed to.

The viewer shall display all the relevant sensor records according to the search specification, together with the thumbnails of the images and a download button for the full size image, the audio files and the scalar data.

data analysis module

This module can be used by all scientist to generate and display an OLAP report for the analysis of scalar data that they are currently subscribed to.
The analysis should be based on data cube information for  the combination of  sensor id, location, and time(according to the values of column date), and report the corresponding average, min, and max values of a sensor.
The user must be able to perform generalization (roll up) and specialization (drill down) on six levels of time hierarchies, i.e., daily, weekly, monthly, quarterly, and yearly.
To speed up the OLAP operations, you want to materialize the data cube information by creating a fact table/view storing all  information needed.
3. Requirements
This is a group project, with three students in each group, and of course, all students in a group will receive the same mark for the project. Send an email to Bing Xu (bx3@ualberta.ca) with the list of students in your group before Oct 16.

Your system must be a three tier system: the database server, the web server, and clients are running on different computer systems that are connected via the Internet. There are many different approaches to interfacing a web site to a database server, such as Java Servlets/JSP and PHP, and you may choose any of these.  You may use Oracle in our lab as the database server, and the Java Tomcat in your C391 account as the web server. The client, however, must be able to access your system using a web browser in any computer system through the Internet (with some restrictions due to recent security concerns).    We will provide support for Java Servlets/JSP, JDBC, and PHP in the lab, and it is your responsibility to make sure your system will work properly during the demo if you choose any other approaches.
You are required to submit

1.Project Report
The report must describe the system architecture: all the major modules (classes/methods) used in the system, and relationships among them. For each module, the report must explain how the solutions were implemented, and list all the main SQL statements used. The explanation should be a concise, high level description such that your implementation can be easily understood by its readers. The report should be written in font size 12 and at most 8 pages.

2.Source Code
You are free to use the demo source code in the course web page, and you must explicitly acknowledge use and respect to the copyright of any source code that you did not develop yourself.                                                          

Follow all the proper programming guidelines learned in your previous courses and add proper comments to make your programs readable. A simple Makefile that will compile all necessary files must be part of your source code.

3.User Documentation
You must submit an electronic copy of the user documentation.
The user documentation must contain

the installation guideline that tells the user how to install your system, and a user manual for each module.

You document must also be accessible in your web page in the form of help menu.  A popular way is written in Markdown.

Each group will be asked to demo the system in our lab. The demo will last at most 30 minutes, and please make sure
the project compiles and runs correctly on the lab machine (CSC 2-19), and your web-pages display correctly using a browser available in the lab machines. You must make sure your system is ready before your scheduled demo.

4. Important Dates
Oct 16: Group Registration Deadline

Nov 3-6: Progress Check

Nov 23: Submission Deadline

Nov 24 - Dec 4: Demo

5. Marking Guidelines
The project will be marked according the following schema.

Project Report

10%

User Document

15%

Implementation

65%

Code quality

10%

The mark for the project report, and user documentation will be based on your understanding of the application system, the description of your implementation strategies, clarity of your document, and of course, English writing.

You must follow proper programming guidelines learned in your previous courses. Poorly documented programs and ill program logic will lead to the deduction of marks.

6. Instructions for Submission

Pack everything in a single zipped file. After unzip, there should be the following folders
./report, ./document, ./code


And an additional file: group.txt

The format for group.txt is:

name1   csid1   student id1

name2   csid2   student id2

name3   csid3   student id3

Only one submission per group